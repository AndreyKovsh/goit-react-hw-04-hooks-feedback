{"version":3,"sources":["component/FeedbackOption/FeedbackOption.js","component/Section/Section.js","component/Statistic/Statistic.js","component/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","map","option","type","className","onClick","Section","title","children","Statistic","good","neutral","bad","total","positivePercentage","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","FeedbackOption","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAsBeA,G,MAlBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OAAOD,EAAQE,KAAI,SAAAC,GAAM,OACvB,wBACEC,KAAK,SACLC,UAAU,MAEVC,QAAS,kBAAML,EAAgBE,IAJjC,SAMGA,GAHIA,QCOII,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,0BAASJ,UAAU,UAAnB,UACE,oBAAIA,UAAU,QAAd,SAAuBG,IACtBC,MCcQC,G,MAhBG,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC9C,OACE,+BACE,qBAAIV,UAAU,OAAd,mBAA4BM,KAC5B,qBAAIN,UAAU,OAAd,sBAA+BO,KAC/B,qBAAIP,UAAU,OAAd,kBAA2BQ,KAC3B,qBAAIR,UAAU,OAAd,oBAA6BS,KAC7B,qBAAIT,UAAU,OAAd,gCAAyCU,EAAzC,YCASC,G,MARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,mBAAGZ,UAAU,MAAb,SAAoBY,MCuDdC,MApDf,WAAgB,IAAD,EACWC,mBAAS,GADpB,mBACNR,EADM,KACAS,EADA,OAEiBD,mBAAS,GAF1B,mBAENP,EAFM,KAEGS,EAFH,OAGSF,mBAAS,GAHlB,mBAGNN,EAHM,KAGDS,EAHC,KAyBPC,EAAqB,kBAAMZ,EAAOC,EAAUC,GAKlD,OACE,qCACE,cAAC,EAAD,CAASL,MAAM,wBAAf,SACE,cAACgB,EAAD,CAAiBvB,gBA3BH,SAAAE,GAClB,OAAQA,GACN,IAAK,OACHiB,EAAQT,EAAO,GACf,MAEF,IAAK,UACHU,EAAWT,EAAU,GACrB,MAEF,IAAK,MACHU,EAAOT,EAAM,GACb,MAEF,QACE,SAY+Cb,QA5BrC,CAAC,OAAQ,UAAW,WA8BhC,cAAC,EAAD,CAASQ,MAAM,aAAf,SACGe,IACC,cAAC,EAAD,CACEZ,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOS,IACPR,mBAdRU,KAAKC,MAAOf,EAAOY,IAAwB,MAAQ,IAiB7C,cAAC,EAAD,CAAcN,QAAQ,4BCxCjBU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7c8ddc5a.chunk.js","sourcesContent":["import React from 'react';\nimport './FeedbackOptions.css';\nimport PT from 'prop-types';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return options.map(option => (\n    <button\n      type=\"button\"\n      className=\"btn\"\n      key={option}\n      onClick={() => onLeaveFeedback(option)}\n    >\n      {option}\n    </button>\n  ));\n};\n\nFeedbackOptions.propTypes = {\n  options: PT.arrayOf(PT.string.isRequired),\n  onLeaveFeedback: PT.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import PT from 'prop-types';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section className=\"section\">\n      <h2 className=\"title\">{title}</h2>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PT.string.isRequired,\n  children: PT.node.isRequired,\n};\n\nexport default Section;\n","import React from 'react';\nimport PT from 'prop-types';\nimport './Statistic.css';\n\nconst Statistic = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <ul>\n      <li className=\"text\">Good: {good}</li>\n      <li className=\"text\">Neutral: {neutral}</li>\n      <li className=\"text\">Bad: {bad}</li>\n      <li className=\"text\">Total: {total}</li>\n      <li className=\"text\">Positive feedback: {positivePercentage}%</li>\n    </ul>\n  );\n};\n\nStatistic.propTypes = {\n  label: PT.string.isRequired,\n  value: PT.number.isRequired,\n};\nexport default Statistic;\n","import PT from 'prop-types';\nimport './Notification.css';\n\nconst Notification = ({ message }) => {\n  return <p className=\"msg\">{message}</p>;\n};\n\nNotification.propTypes = {\n  message: PT.string.isRequired,\n};\n\nexport default Notification;\n","import { useState } from 'react';\nimport FeedbackOptions from './component/FeedbackOption/FeedbackOption';\nimport Section from './component/Section/Section';\n// import { Component } from 'react';\nimport Statistic from './component/Statistic/Statistic';\nimport Notification from './component/Notification/Notification';\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const options = ['good', 'neutral', 'bad'];\n  const addFeedback = option => {\n    switch (option) {\n      case 'good':\n        setGood(good + 1);\n        break;\n\n      case 'neutral':\n        setNeutral(neutral + 1);\n        break;\n\n      case 'bad':\n        setBad(bad + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => good + neutral + bad;\n\n  const countPositiveFeedbackPercentage = () =>\n    Math.round((good / countTotalFeedback()) * 100) || 0;\n\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions onLeaveFeedback={addFeedback} options={options} />\n      </Section>\n      <Section title=\"Statistics\">\n        {countTotalFeedback() ? (\n          <Statistic\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          ></Statistic>\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n    </>\n  );\n}\n\nexport default App;\n// class App extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n\n//   addFeedback = option => {\n//     this.setState(state => ({\n//       [option]: state[option] + 1,\n//     }));\n//   };\n\n//   countTotalFeedback = () => {\n//     return Object.values(this.state).reduce((acc, option) => acc + option, 0);\n//   };\n\n//   countPositiveFeedbackPercentage = () => {\n//     const { good } = this.state;\n//     return Math.round((good / this.countTotalFeedback()) * 100) || 0;\n//   };\n\n//   render() {\n//     const { good, neutral, bad } = this.state;\n//     return (\n//        <>\n//         <Section title=\"Please leave feedback\">\n//           <FeedbackOptions\n//             options={Object.keys(this.state)}\n//             onLeaveFeedback={this.addFeedback}\n//           />\n//         </Section>\n//         <Section title=\"Statistics\">\n//           {this.countTotalFeedback() ? (\n//             <Statistic\n//               good={good}\n//               neutral={neutral}\n//               bad={bad}\n//               total={this.countTotalFeedback()}\n//               positivePercentage={this.countPositiveFeedbackPercentage()}\n//             ></Statistic>\n//           ) : (\n//             <Notification message=\"No feedback given\" />\n//           )}\n//         </Section>\n//       </>\n//     );\n//   }\n// }\n\n// export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}